<?php

namespace TVF\RecordBundle\Repository;

/**
 * VinylRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class VinylRepository extends \Doctrine\ORM\EntityRepository
{
  public function search($filter, $offset = 0, $limit = 12, $client_id = null, $count = false)
  {
    $qb = $this->createQueryBuilder('e');
    if($count){
      $qb = $qb->select('COUNT(DISTINCT e.id)');
    }
    $qb = $qb->innerJoin('e.artists', 'a')
          ->innerJoin('e.category', 'c')
          ->where("c.slug = 'vinyle'")
    ;
    // TODO handle more filters
    $queries = $filter['keywords'];
    if($queries != [""]){
      $i = 0;
      $sql = '';
      foreach ($queries as $query) {
        if($i > 0){
          $sql .= ' OR ';
        }
        $sql .= 'SOUNDEX(a.name) LIKE SOUNDEX(:query_artist'.$i.') OR SOUNDEX(e.name) LIKE SOUNDEX(:query'.$i.')';
        $i++;
      }
      $qb = $qb->andWhere($sql);
      $i = 0;
      foreach ($queries as $query) {
        $qb = $qb->setParameter('query_artist'.$i, '%'.$query.'%')
                 ->setParameter('query'.$i, '%'.$query.'%')
        ;
        $i++;
      }
    }

    if($client_id){
      $qb = $qb->innerJoin('e.client', 'r')
               ->andWhere("r.id = :client_id")
               ->setParameter('client_id', $client_id)
      ;
    }
    if($count){
      return $qb->getQuery()
             ->getSingleScalarResult()
      ;
    } else {
      // Here is an ugly fix because LIMIT and OFFSET don't work well with JOIN in DQL

      $statistic_limit = ($offset + $limit)*5;
      $results = $qb->orderBy('e.id', 'DESC')
             ->setMaxResults($statistic_limit)
             ->getQuery()
             ->getResult()
      ;
      return array_slice($results, $offset, $limit);
    }

  }
  public function getVinyls($limit=(1024*1024*1024)){
    return $this->createQueryBuilder('e')
          ->innerJoin('e.category', 'c')
          ->where("c.slug = 'vinyle'")
          ->orderBy('e.id', 'DESC')
          ->setMaxResults($limit)
          ->getQuery()
          ->getResult()
    ;
  }
  public function countVinyls(){
    return $this->createQueryBuilder('e')
          ->select('COUNT(e)')
          ->innerJoin('e.category', 'c')
          ->where("c.slug = 'vinyle'")
          ->orderBy('e.id', 'DESC')
          ->getQuery()
          ->getSingleScalarResult()
    ;
  }
  public function getVinylsFromClient($client_id, $limit=(1024*1024*1024)){
    return $this->createQueryBuilder('e')
          ->innerJoin('e.category', 'c')
          ->innerJoin('e.client', 'r')
          ->where("c.slug = 'vinyle'")
          ->andWhere("r.id = :client_id")
          ->setParameter('client_id', $client_id)
          ->orderBy('e.id', 'DESC')
          ->setMaxResults($limit)
          ->getQuery()
          ->getResult()
    ;
  }
  public function countVinylsFromClient($client_id){
     return $this->createQueryBuilder('e')
           ->select('COUNT(e)')
           ->innerJoin('e.category', 'c')
           ->innerJoin('e.client', 'r')
           ->where("c.slug = 'vinyle'")
           ->andWhere("r.id = :client_id")
           ->setParameter('client_id', $client_id)
           ->orderBy('e.id', 'DESC')
           ->getQuery()
           ->getSingleScalarResult()
     ;
  }
}
