{% extends "TVFStoreBundle:Search:layout.html.twig" %}
{% block head %}
  <link rel="stylesheet" href="{{ asset('bundles/TVF/magicsuggest.css') }}">
{% endblock %}
{% block body %}
<div id="add-creation-page">
  {% set navbar = "TVFStoreBundle:Utils:nav.html.twig" %}
  {{ include(navbar, {'active': 'collection'}) }}
  <div class="container" style="margin-bottom: 50px;">
    <form name="form" class="form-signin" method="post" enctype="multipart/form-data" action="{{ path('tvf_record_vinyl_add',{'id': id}) }}">
    <div class="row">
      <div class="col-sm-6 offset-sm-3">
        <h3 class="form-signin-heading">{% if id == 0 %}Ajouter{% else %}Modifier{% endif %} un album vinyle</h3>
        {% set input_form="TVFAdminBundle:Utils:form_input.html.twig" %}
        {% set save_form="TVFAdminBundle:Utils:form_save.html.twig" %}
        <div class="h3">
          {{ form_label(form.name, "Nom de l'album", {'label_attr' : {'class': 'sr-only'}}) }}
          {{ form_errors(form.name) }}
        <div class="input-group">
          {{ form_widget(form.name, {'attr': {'class': 'form-control', 'placeholder': "Indiquez le nom de l'album..."}}) }}
          <span class="input-group-btn">
            <a id="search_launch" class="btn btn-primary" type="button" href="#"><i class="fa fa-search" aria-hidden="true"></i></a>
          </span>
        </div>
        </div>
        <div id="album_results"></div>
        <div id="artist_suggest">
          <i class="fa fa-circle-o-notch fa-spin fa-2x fa-fw"></i>
          <span class="sr-only">Loading...</span>
        </div>
        <div class="hide">{{ include(input_form, {'element': form.artists, 'name':"Artiste"}) }}</div>
        <hr />
        <a href="#" class="internal-link" data-target="box_description">
          <h5>+ Ajouter une description</h5>
        </a>
        <div id="box_description" class="hide">
          {{ include(input_form, {'element': form.description, 'name':"Donnez quelques éléments à propos de cet album"}) }}
        </div>
        <hr />
        {% set form_image_icon = "TVFRecordBundle:Vinyl:form_image_icon.html.twig" %}
        <div style="margin-top: 10px; {% if id == 0 %}display: none;{% endif %}">
          <h5 style="margin-bottom: -0.5rem;">{{ form_label(form.imgs, "Illustrations") }}</h5>
          {{ form_errors(form.imgs) }}
          {% for img in form.imgs %}
            <div style="visibility: hidden; height:0px;">{{ form_label(img, null, {'label_attr' : {'id': loop.index0 , 'class': 'icon-label'}}) }}</div>
            <div class="img-thumbnail creation-icon" style="width: calc(102px + 0.5rem);">
              <div class="img-cadre" style="width: 100px; height: 100px;">
                <img src="{{ asset('uploads/img/') }}" id="img-{{ loop.index0 }}" style="margin-bottom: -65px;">
                <div class="caption" style="background-image: none">
                  <div class="delete-img"><p><a href="#">Supprimer</a></p></div>
                  <span class="hide">{{ form_widget(img) }}</span>
                </div>
              </div>
            </div>
          {% endfor %}
        </div>
        {# store the prototype on the data-prototype attribute #}
        <span class="hide">{{ form_label(form.images, 'Nouvelles images', {'label_attr' : {'class': ''}}) }}</span>
        <div id="image-fields-list"
            data-prototype='{{ include(form_image_icon, {'widget':form_widget(form.images.vars.prototype)|e}) }}'>
        {% for imageField in form.images %}
            <li>
                {{ form_errors(imageField) }}
                {{ form_widget(imageField) }}
            </li>
        {% endfor %}
        </div>
        <div class="img-thumbnail creation-icon" style="width: calc(102px + 0.5rem);">
          <div class="img-cadre" style="width: 100px; height: 100px;">
            <div class="caption" style="background-image: none">
              <p style="margin-top: 25px; text-align: center;">
                <a href="#" id="add-another-image" style="color: #0275d8">+ Ajouter une image</a>
              </p>
            </div>
          </div>
        </div>
        <div style="clear:both; height: 10px;"></div>
        <hr />
        <div style="margin-top: 10px; display: flex;">
          <div>
            {{ form_errors(form.onsold) }}
            <a href="#" class="btn btn-default btn-tvf internal-link keep add-price" data-target="price">
              En vente
            </a>
            <div class="hide">
              {{ form_widget(form.onsold) }}
              {{ form_label(form.onsold, "En vente") }}
              {{ form_label(form.price, 'Prix €', {'label_attr' : {'class': 'sr-only'}}) }}
              {{ form_errors(form.price) }}
            </div>
          </div>
          <div id="price" class="hide" style="width: 100%;">
            <div class="input-group">
              {{ form_widget(form.price, {'attr': {'class': 'form-control', 'placeholder': 'Prix (sans unité)'}}) }}
              <span class="input-group-addon">€</span>
            </div>
          </div>
        </div>
        <hr />
        <div style="margin-top: 10px;">
          <h5>{{ form_label(form.types, "Genre musical") }}</h5>
        </div>
        <ul class="list-group">
          <li class="list-group-item" style="padding: 5px; padding-right:0px;">
            <div class="horizontal-scroll">
              {% for gender in genders %}
              <a href="#" data-toggle="gender{{ gender.id }}" class="toggler btn btn-default btn-tvf">{{ gender.name }}</a>
              {% endfor %}
            </div>
          </li>
        </ul>
        <div id="menu_lateral">
          {% for gender in genders %}
          <div id="gender{{ gender.id }}" class="gender hide">
            <li class="list-group-item justify-content-between">
              <a href="#" class="toggle-all">
                <i class="fa fa-dot-circle-o" aria-hidden="true"></i>&nbsp;
                 <span class="text">Tout sélectionner</span>
              </a>
            </li>
          {% for type in gender.types %}
            <li class="list-group-item justify-content-between">
              <a href="#type-{{ type.id }}" class="filter">
                <i class="fa fa-circle-thin" aria-hidden="true"></i>&nbsp;
                 <input id="form_types_{{ type.id }}" name="form[types][]" value="{{ type.id }}" type="checkbox" class="hide">
                 {{ type.name }}
              </a>
            </li>
          {% endfor %}
          </div>
          {% endfor %}
        </div>
        <hr />
        {{ include(save_form, {'element': form.save, 'name':"Publier"}) }}
        {% set card="TVFRecordBundle:Attribute:card_attribute.html.twig" %}
        <a href="#" class="internal-link" data-target="panel_options">
          <h6 style="margin-top: 10px;">+ Ajouter des informations supplémentaires</h6>
        </a>
        <div id="panel_options" style="margin-top: 10px;" class="hide">
          <hr />
          <h5>Déclinaisons du modèle</h5>
          <div style="margin-bottom: 10px;">
            <a target="_blank" href="{{ path('tvf_record_vinyl_attributes') }}">
              Modifier le choix de déclinaisons
            </a>
          </div>
          <h5>{{ form_label(form.attributes, "Tailles disponibles") }}</h5>
          {{ form_errors(form.attributes) }}
          {% for attribute in form.attributes %}
            {% set index = attribute.vars.value %}
            {% set entity = form.attributes.vars.choices[index].data %}
            {% if entity.category == 'size' %}
            {{ include(card, {'attribute': entity, 'allow_modify': false, 'widget': form_widget(attribute) }) }}
            {% endif %}
          {% endfor %}
          <div style="clear: both;"></div>
          <h5 style="margin-top: 10px;">{{ form_label(form.attributes, "Couleurs disponibles") }}</h5>
          {{ form_errors(form.attributes) }}
          {% for attribute in form.attributes %}
            {% set index = attribute.vars.value %}
            {% set entity = form.attributes.vars.choices[index].data %}
            {% if entity.category == 'color' %}
            {{ include(card, {'attribute': entity, 'allow_modify': false, 'widget': form_widget(attribute) }) }}
            {% endif %}
          {% endfor %}
          <div style="clear: both;"></div>
          <h5 style="margin-top: 10px;">{{ form_label(form.attributes, "Attributs spéciaux") }}</h5>
          {{ form_errors(form.attributes) }}
          {% for attribute in form.attributes %}
            {% set index = attribute.vars.value %}
            {% set entity = form.attributes.vars.choices[index].data %}
            {% if entity.category == 'other' %}
            {{ include(card, {'attribute': entity, 'allow_modify': false, 'widget': form_widget(attribute) }) }}
            {% endif %}
          {% endfor %}
        </div>
        <div style="clear: both;"></div>
        <div id="music_types" class="hide">
          {{ form_widget(form.types) }}
        </div>
        {{ form_widget(form._token) }}
        <div style="display:none">
          {{ form_rest(form) }}
        </div>
      </div>
    </div>
    </form>
  </div>
</div>
{% endblock %}
{% block script %}
<script src="{{ asset('bundles/TVF/js/magicsuggest.js') }}"></script>
{% set type_select = "TVFRecordBundle:Scripts:type_select.html.twig" %}
{{ include(type_select) }}
<script>
/* handle the search of the artist and meta data with Spotify API */
$('#form_name').attr('autocomplete', 'off');
var token = null;
$.ajax({
    url: '{{ path('tvf_record_client_token') }}',
    success: function(response) {
      token = response.token;
    }
});
function search_artists() {
  var album = $('#form_name').val();
  $.ajax({
      url: 'https://api.spotify.com/v1/search?q='+album+'&type=album',
      headers: {
        'Authorization': 'Bearer ' + token
      },
      success: function(response) {
        console.log(response);
        results = response.albums.items;
        var list = $('<ul class="list-group"></ul>');
        for(index in results){
          if(index < 10){
            var name = results[index].name;
            var artists = results[index].artists;
            console.log(results[index].name);
            var item = $('<li class="list-group-item">');
            var artists_label = '';
            for(var i=0; i<artists.length; i++){
              artists_label += artists[i].name;
              if(i+1 < artists.length){
                artists_label += ', ';
              }
            }
            var images = results[index].images;
            var image;
            var height = 0;
            for(var i=0; i<images.length; i++){
              if(images[i].height >= height){
                image = images[i].url;
                height = images[i].height
              }
            }
            item.html(`<span class="album">`+ name + `</span>
            &nbsp;·&nbsp;<span class="secondary artist"> `+artists_label+`</span>
            <span class="image hide">`+image+ `</span>`);
            item.appendTo(list);
          }
        }
        $('#album_results').html('');
        $('#album_results').append(list).show();
      }
  });
}
$('#search_launch').on('click', function(e){
  e.preventDefault();
  search_artists();
});
/* Delay the search to activate search only when user has stopped typing */
var last_key_up = -1;
var delay = 600; // ms
var dropdown = {
  active: false,
  _user_value: '',
  select: function(){
    var item;
    if(dropdown.active){
      var item = dropdown._get_item();
      item.click();
    }
  },
  movedown: function(){
    if(!dropdown.active){
      dropdown.active = true;
      dropdown._user_value = $(dropdown._input_id).val();
      dropdown._set_item(0);
    } else {
      var item = dropdown._next_item();
      if(item === null){
        dropdown.clear();
        $(dropdown._input_id).val(dropdown._user_value);
      } else {
        dropdown._activate_item(item);
      }
    }
  },
  moveup: function(){
    if(!dropdown.active){
      dropdown.active = true;
      n_item = $(dropdown._id + ' li').length;
      dropdown._set_item(n_item - 1);
    } else {
      var item = dropdown._previous_item();
      if(item === null){
        dropdown.clear();
        $(dropdown._input_id).val(dropdown._user_value);
      } else {
        dropdown._activate_item(item);
      }
    }
  },
  _id: '#album_results',
  _input_id: '#form_name',
  _activate_item: function(item){
    $(dropdown._id + ' li').removeClass('item-selected');
    item.addClass('item-selected');
    $(dropdown._input_id).val(item.find('.album').html());
  },
  _set_item: function(index){
    var item = $(dropdown._id + ' li:eq('+index+')');
    dropdown._activate_item(item);
    return item;
  },
  _get_item: function(){
    var item = $(dropdown._id + ' li.item-selected').first();
    if(item.length > 0){
      return item;
    } else {
      return $(dropdown._id + ' li').first();
    }
  },
  _next_item: function(){
    var item = dropdown._get_item();
    var next_item = item.next();
    return (next_item.length > 0) ? next_item : null;
  },
  _previous_item: function(){
    var item = dropdown._get_item();
    var previous_item = item.prev();
    return (previous_item.length > 0) ? previous_item : null;
  },
  clear: function(){
    dropdown.active = false;
    $(dropdown._id + ' li').removeClass('item-selected');
  }
}
$(dropdown._id).mousemove(function(){
  dropdown.clear();
});
$('#form_name').keypress(function(e){
  var KEYCODES = {
      BACKSPACE: 8,
      TAB: 9,
      ENTER: 13,
      CTRL: 17,
      ESC: 27,
      SPACE: 32,
      UPARROW: 38,
      DOWNARROW: 40,
      COMMA: 188
  };
  switch(e.keyCode) {
    case KEYCODES.ENTER:
        e.preventDefault();
        console.log('BLOCK SELECTION');
        dropdown.select();
        break;
    case KEYCODES.DOWNARROW:
        e.preventDefault();
        dropdown.movedown();
        break;
    case KEYCODES.UPARROW:
        e.preventDefault();
        dropdown.moveup();
        break;
    default:
        var date = new Date();
        last_key_up = date.getTime();
        setTimeout(function(){
          var date = new Date();
          if(date.getTime() - last_key_up > delay - 50){
            search_artists();
          }
        }, delay);
        break;
    }
});
// When click on a suggested item
$('body').on('click', '#album_results li', function(){
  var album = $(this).find('.album').html();
  album = album.replace(/&amp;/g, '&');
  $('#form_name').val(album);
  $('#album_results').html('');
  var image = $(this).find('.image').html();
  add_image_from_url(image);
  var artists = $(this).find('.artist').html().split(', ');
  for(var i=0; i<artists.length; i++){
    var artist = artists[i].trim();
    var id = artist;
    // if artist exists, fetch its id
    if(list_artists[artist] != undefined) {
      id = list_artists[artist];
    }
    ms.addToSelection({id: id, name: artist});
  }
});
// When click outside of the results, clsoe the results suggestions
$(document).mouseup(function(e){
    var container = $('#album_results');
    // if the target of the click isn't the container nor a descendant of the container
    if (!container.is(e.target) && container.has(e.target).length === 0) {
        container.hide();
    }
});
</script>
<script>
  var stack_select_new_artist = [];
  var data_artists = [
    {% for artist in artists %}
      {'id': '{{ artist.id }}', 'name': "{{ artist.name|raw }}"}{% if not loop.last %},{% endif %}
    {% endfor %}
  ];
  var name_artists = {
    {% for artist in artists %}
      {{ artist.id }}: "{{ artist.name|raw }}"{% if not loop.last %},{% endif %}
    {% endfor %}
  };
  var list_artists = {
    {% for artist in artists %}
      "{{ artist.name|raw }}": {{ artist.id }}{% if not loop.last %},{% endif %}
    {% endfor %}
  };
  /* Handle the selection of artists */
  var ms = $('#artist_suggest').magicSuggest({
      data : data_artists
  });
  // Add the artists already binded in the input
  var former_artists = $('#form_artists').val();
  var former_selection = [];
  for(var i=0; i < former_artists.length; i++){
    var id = former_artists[i];
    former_selection.push({id: id, name: name_artists[id]});
  }
  ms.addToSelection(former_selection);

  var existing_artists = [];
  $(ms).on('selectionchange', function(){
    var selected_artists = this.getValue();
    console.log(selected_artists);
    existing_artists = [];
    for (var i = 0; i < selected_artists.length; i++) {
      var artist = selected_artists[i];
      select_artist(artist);
    }
    //console.log(existing_artists);
    $('#form_artists').val(existing_artists);
  });

  function select_artist(artist){
    if (typeof artist === 'string' || artist instanceof String){
        artist = artist.trim();
    }
    console.log('Select artist :'+artist+':');
    // Test if is a know id, elseif a known name, else ask to register the artist
    if(name_artists[artist] != undefined) {
      existing_artists.push(artist);
    } else if(list_artists[artist] != undefined) {
      var id = list_artists[artist];
      existing_artists.push(id);
    } else {
      // in normal condition this shouldn't be an id but an artist name
      if($.inArray(artist, stack_select_new_artist) == -1){
        stack_select_new_artist.unshift(artist);
        if(stack_select_new_artist.length == 1){
            select_new_artist(artist);
        }
      }
    }
  }

  function select_new_artist(artist){
    console.log(artist + ' must be added to the database...');
    $.ajax({
        url: 'https://api.spotify.com/v1/search?q='+artist+'&type=artist',
        headers: {
          'Authorization': 'Bearer ' + token
        },
        success: function(response) {
          var found_artists = response.artists.items;
          display_artists_choice(found_artists);
        }
    });
  }
  function display_artists_choice(artists){
    var content = $('<ul/>', {
      id: 'artists_choice',
      class: 'list-group'
    });
    if(artists.length == 0){
      var see_more = $('<li/>').addClass('list-group-item');
      see_more.html("Nous n'avons pas trouvé de résultats. :/ <br />Essayez peut-être avec une autre orthographe.");
      content.append(see_more);
    }
    for(var i=0; i<artists.length; i++){
      if(i == 1){
        var see_more = $('<li/>').addClass('list-group-item');
        see_more.html('<a href="#" id="see_more_artists">+ Voir plus de résultats</a>');
        content.append(see_more);
      }
      var artist = artists[i];
      var url = '...';
      if(artist.images.length > 0){
        url = artist.images[0].url;
      }
      var artist_node = $('<li/>').addClass('list-group-item');
      if(i > 0){
        artist_node.addClass('hide');
      }
      $(`<div class="media">
        <img alt="Pas d'aperçu" src="`+ url +`" class="d-flex mr-3">
        <div class="media-body">
          <h5 class="mt-0">`+ artist.name +`</h5>
          <p class="secondary">`+ artist.genres.join(' · ') +`</p>
          <a href="#" class="btn btn-primary register-artist" id="`+ artist.id +`">Sélectionner</a>
        </div>
      </div>`).appendTo(artist_node);
      content.append(artist_node);
    }
    bootbox.confirm({
        title: "À quel artiste pensez-vous ?",
        message: content,
        buttons: {
          confirm: {
            label: 'Confirmer'
          },
          cancel: {
            label: 'Annuler'
          }
        },
        callback: function(result) {
          if(result == 0){
            console.log('Cancel artist selection...');
            proceed_to_next_artist();
            $('#artist_suggest .ms-sel-item:last').fadeOut('slow');
            setTimeout(function(){
              $('#artist_suggest .ms-sel-item:last .ms-close-btn').click();
            }, 1000);
          } else {
            console.log('Artist chosen.');
          }
        }
    });
    $('body').on('click', '#see_more_artists', function(e){
      e.preventDefault();
      $('#artists_choice li.hide').slideDown().css('display', 'block');
      $('#see_more_artists').parents('li').hide();
    });
    $('body').on('click', '#artists_choice .register-artist', function(e){
      e.preventDefault();
      register_artist(this.id);
    });
  }
  function proceed_to_next_artist(){
    // check if other artists in stack to add
    stack_select_new_artist.pop();
    var len = stack_select_new_artist.length;
    if(len > 0){
      var artist = stack_select_new_artist[len-1];
      select_new_artist(artist);
    }
  }
  function register_artist(spotify_id){
    $('button[data-bb-handler=confirm]').click();
    $.ajax({
        url: '{{ path('tvf_record_artist_search') }}/' + spotify_id,
        success: function(response) {
          var id = response.id;
          var name = response.name;
          var option = $('<option value="'+id+'" selected="selected">'+name+'</option></select>');
          $('#form_artists').append(option);
          data_artists.push({'id': id, 'name':name});
          name_artists[id] = name;
          // Update the ms component
          var ids = ms.getValue();
          var real_ids = []
          ms.clear();
          for(i=0; i<ids.length; i++){
            if(name_artists[ids[i]] != undefined){
              ms.addToSelection({id: ids[i], name:name_artists[ids[i]]});
            }
          }
          ms.setValue(real_ids);
          ms.addToSelection({id: id, name:name});
          // check if other artists in stack to add
          proceed_to_next_artist();
        }
    });
  }

</script>
<script type="text/javascript">
  /* Handle the multi image upload */

  // keep track of how many image fields have been rendered
  var imageCount = '{{ form.images|length }}';
  jQuery(document).ready(function() {
      $('#add-another-image').click(function(e) {
          e.preventDefault();
          var imageList = $('#image-fields-list');
          // grab the prototype template
          var newWidget = imageList.attr('data-prototype');
          // replace the "__name__" used in the id and name of the prototype
          // with a number that's unique to your images
          // end name attribute looks like name="contact[images][2]"
          newWidget = newWidget.replace(/__name__/g, imageCount);
          imageCount++;
          // create a new element and add it to the list
          var newElmt = $(newWidget);
          newElmt.appendTo(imageList);
          newElmt.find('input').click();
      });
  })
  function add_image_from_url(url){
    var imageList = $('#image-fields-list');
    var newWidget = imageList.attr('data-prototype');
    newWidget = newWidget.replace(/__name__/g, imageCount);
    imageCount++;
    var newElmt = $(newWidget);
    newElmt.appendTo(imageList);
    var input = newElmt.find('input');
    input.attr('type', 'text');
    input.val(url);
    create_thumbnail(input, url);
  }
  function readURL(input) {
    if (input.files && input.files[0]) {
      var reader = new FileReader();
      reader.onload = function(e) {
        create_thumbnail(input, e.target.result);
      }
      reader.readAsDataURL(input.files[0]);
    }
  }
  function create_thumbnail(input, src) {
    var caption_box = $(input).parents('.caption');
    caption_box.find('p').hide();
    caption_box.prepend($('<img src="'+src+'">'));
    caption_box.prepend($('<div class="delete-img"><p><a href="#">Supprimer</a></p></div>'));
    setTimeout(function(){
      var img = caption_box.find('img').first();
      var width = img.width();
      var height = img.height();
      console.log(width+ ' '+ height);
      if(width < height){
         img.addClass('portrait');
      }
      img.show();
    }, 100);
  }
  $('body').on('change', '.dyn_image_form input', function(){
    readURL(this);
  });
  $('body').on('click', '.delete-img a', function(e){
    e.preventDefault();
    var icon = $(this).parents('.creation-icon');
    if(icon.find('input[type=checkbox]').length > 0){
      icon.find('input[type=checkbox]').prop('checked', false);
      icon.hide();
    } else if(icon.find('input[type=file]').length > 0){
      icon.remove();
    } else if(icon.find('input[type=text]').length > 0){
      icon.remove();
    }
  });
</script>
<script>
  /* Handle card-attribute selection */
  $('.attribute-card').on('click', function(){
    var selected = ($(this).attr('data-selected') == '1');
    if(selected){
      $(this).removeClass('card-selected');
      $(this).attr('data-selected', '0');
    } else {
      $(this).addClass('card-selected');
      $(this).attr('data-selected', '1');
    }
    $(this).find('input').prop('checked', !selected);
  });
  $('.attribute-card').each(function(){
    var selected = $(this).find('input').prop('checked');
    if(selected){
      $(this).addClass('card-selected');
      $(this).attr('data-selected', '1');
    } else {
      $(this).removeClass('card-selected');
      $(this).attr('data-selected', '0');
    }
  });
</script>
<script>
  //$("#carousel .carousel-item").zoom({ on:'grab' });
  $('#carousel img')
    .wrap('<span style="display:inline-block"></span>')
    .css('display', 'block')
    .parent()
    .zoom({ on:'grab' });
</script>
<script>
  $('.icon-label').each(function(){
    var id = $(this).attr('id');
    var full_url = $(this).html().split('/');
    var url = full_url[full_url.length-1];
    var src = $('#img-'+id).attr('src');
    src = src + url;
    $('#img-'+id).attr('src', src);
  });
  $('.creation-icon input').each(function(){
    $(this).prop("checked", true);
  });
</script>
<script>
  /* Handle onsold */
  var onsold = $('#form_onsold').prop("checked");
  if(onsold){
    $('#price').show();
  }
  $('.add-price').on('click', function(e){
    onsold = !onsold;
    if(onsold){
      $(this).addClass('link-selected');
      $('#price').css('display', 'flex');
    } else {
      $(this).removeClass('link-selected');
      $('#price').css('display', 'none');
    }
    $('#form_onsold').prop('checked', onsold);
  });
</script>
{% endblock %}
